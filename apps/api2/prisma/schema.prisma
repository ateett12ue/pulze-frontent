// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  
  

  relationMode = "prisma"
}

// schema.prisma
// // schema.prisma
// model User {
//     id            String    @id @default(uuid()) @map("_id") // Use UUID
//     email         String    @unique
//     passwordHash  String
//     videos Video[]
     // Custom type for video IDs
    // workspaces    Workspace[]
// }



// model Workspace {
//     workspace_id          String       @id @default(uuid()) @map("_workspace_id") // Use UUID
//     name                  String
//     workspace_creator_id  String       @map("workspace_creator_id")
//     workspace_creator     User         @relation(fields: [workspace_creator_id], references: [id])
//     workspace_members     String[]     // Custom type for user IDs
// }

// Define custom types
// type VideoID = String @scalarList(strategy: RELATION)
// type UserID = String @scalarList(strategy: RELATION)

// model Video {
//     video_id        String  @id @default(uuid()) @map("_video_id") // Use UUID
//     title     String
//     user      User    @relation(fields: [user_id], references: [id])
//     user_id   String
// }

// schema.prisma
// model User {
//     user_ID       String          @id @default(uuid()) @map("_user_id") // Primary key with UUID
//     name          String
//     email         String          @unique
//     password      String
//     videos        Video[]         // Reference to Video model
//     workspaces    Workspace[]     // Reference to Workspace model
//     workspaceMembers WorkspaceMember[]
// }

// model Video {
//     video_id      String          @id @default(uuid()) @map("_video_id") // Primary key with UUID
//     title         String
//     description   String
//     s3Key         String
//     workspace_id  String          // Foreign key of Workspace model
//     workspace     Workspace       @relation(fields: [workspace_id], references: [workspace_id])
//     shared_with   User[]          // Array of User model
// }

// model Workspace {
//     workspace_id          String               @id @default(uuid()) @map("_workspace_id") // Primary key with UUID
//     name                  String
//     workspace_creator_id  String               // Foreign key of User model
//     workspace_creator     User                 @relation(fields: [workspace_creator_id], references: [user_ID])
//     workspace_members     WorkspaceMember[]    // Reference to WorkspaceMember model
// }


// model WorkspaceMember {
//     workspace_member_id   String               @id @default(uuid()) @map("_workspace_member_id") // Primary key with UUID
//     user_id               String               // Foreign key of User model
//     workspace_id          String               // Foreign key of Workspace model
//     user                  User                 @relation(fields: [user_id], references: [user_ID])
//     workspace             Workspace            @relation(fields: [workspace_id], references: [workspace_id])
// }

// schema.prisma
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model User {
    id      String          @id @default(uuid()) @map("_user_id") // Primary key with UUID
    name          String
    email         String          @unique
    password      String?
    phonenumber   String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    videos        Video[]         //Reference
    workspaces    Workspace[]     // Reference to Workspace model
    workspaceMembers WorkspaceMember[] // Added opposite relation
}

model Video {
    video_id      String          @id @default(uuid()) @map("_video_id") // Primary key with UUID
    title         String?
    description   String?
    ETag          String
    Location      String
   
    Key           String
    Bucket        String
    creatorId  String          // Foreign key of User model
    creator       User            @relation(fields: [creatorId], references: [id])  // Reference to User model

    workspace_id  String          // Foreign key of Workspace model
    workspace     Workspace       @relation(fields: [workspace_id], references: [workspace_id])
    // shared_with   User[]          // Array of User model

}







model Workspace {
    workspace_id          String               @id @default(uuid()) @map("_workspace_id") // Primary key with UUID
    name                  String
    workspace_creator_id  String               // Foreign key of User model
    workspace_creator     User                 @relation(fields: [workspace_creator_id], references: [id])
    workspace_members     WorkspaceMember[]    // Reference to WorkspaceMember model
    videos                Video[]               // Added opposite relation
}

model WorkspaceMember {
    workspace_member_id   String               @id @default(uuid()) @map("_workspace_member_id") // Primary key with UUID
    user_id               String               // Foreign key of User model
    workspace_id          String               // Foreign key of Workspace model
    user                  User                 @relation(fields: [user_id], references: [id])
    // workspace             Workspace            @relation(fields: [workspace_id], references: [workspace_id])
    workspace             Workspace            @relation(fields: [workspace_id], references: [workspace_id], onDelete: Cascade)

}
